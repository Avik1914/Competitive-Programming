/*
In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.

We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1
 

Note:

1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] == 1
1 <= initial.length <= graph.length
0 <= initial[i] < graph.length
*/

/*Brute Force*/
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Map<Integer,List<Integer>> map=new HashMap();
        int len=graph.length;
        
        for(int i=0;i<len;i++)
         map.put(i,new ArrayList());
        
        for(int i=0;i<len;i++){
            for(int j=0;j<len;j++){
                if(graph[i][j]==1){
                    map.get(i).add(j);
                    map.get(j).add(i);
                }
            }
        }
        
        
        int min=Integer.MAX_VALUE;
        int ret=-1;
        for(int i:initial){
        
            int val=bfs(map,i,len,initial);
           if(min>=val){
                ret=ret>i || min > val?i:ret;
                min=val;
                
            }
        }
        
        return ret;
    }
    
    public int bfs(Map<Integer,List<Integer>> map,int val,int len,int[] init){
        boolean[] visit=new boolean[len];
        Queue<Integer> queue=new LinkedList();
        for(int i:init){
            if(i!=val){
                queue.add(i);
                visit[i]=true;
            }
                
        }
        
        int res=0;
        
        while(!queue.isEmpty()){
            int num=queue.poll();
            res++;
            for(int n:map.get(num)){
                if(!visit[n]){
                    visit[n]=true;
                    queue.add(n);
                }
            }
        }
        
        return res;
    }
}

/*Optimized DFS*/
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int len=graph.length;
        
        int[] color=new int[len];
        Arrays.fill(color,-1);
        Map<Integer,Integer> size=new HashMap();
        
        for(int i=0;i<len;i++){
            if(color[i]==-1) {
                size.put(i,dfs(graph,i,i,color));
            }
        }
        
         int uni=-1;
         int val=-1;
        Map<Integer,Boolean> used=new HashMap();
         int min=Integer.MAX_VALUE;
        for(int i:initial){
            if(used.containsKey(color[i])){
                used.put(color[i],false);
            }
            else
                used.put(color[i],true);
            min=Math.min(i,min);
        }
       
            for(int i:initial){
                if(used.get(color[i])){
                    if(uni==-1 || val<=size.get(color[i])){
                        if(val==size.get(color[i])){
                            if(uni>i)
                                uni=i;
                        }else{
                            uni=i;
                            val=size.get(color[i]);
                        }
                    }
                }
            }
        
        return uni==-1?min:uni;
    }
    
    public int dfs(int[][] graph,int start,int c,int[] color){
        color[start]=c;
        int res=1;
        int itr=0;
        for(int g:graph[start]){
            if(g==1 && color[itr]!=c){
                res+=dfs(graph,itr,c,color);
            }
            itr++;
        }
        return res;
    }
    
}
